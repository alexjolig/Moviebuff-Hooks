{"ast":null,"code":"import _slicedToArray from \"E:\\\\MovieBuff_React-Hooks\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\MovieBuff_React-Hooks\\\\src\\\\components\\\\table.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport addMovie from '../globals';\nimport Pagination from './pagination';\nimport { FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, movieExists } from '../globals';\nimport { changePage, refreshMovies } from '../actions';\n\nfunction Table() {\n  const props = useSelector(state => ({\n    movies: state.movies,\n    isAnyData: state.isAnyData,\n    currentPage: state.currentPage,\n    query: state.query\n  }));\n\n  const _useState = useState(props.query),\n        _useState2 = _slicedToArray(_useState, 2),\n        finalQuery = _useState2[0],\n        setFinalQuery = _useState2[1];\n\n  const _useState3 = useState(1),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currentPage = _useState4[0],\n        setCurrentPage = _useState4[1];\n\n  const dispatch = useDispatch();\n\n  const getMovies = () => {\n    if (props.query === \"\") return;\n    dispatch(refreshMovies());\n  };\n\n  useEffect(() => {\n    if (finalQuery !== props.query) {\n      //to get back to page number one when searching for a new movie, we have to set both store state and this component state\n      dispatch(changePage(1));\n      setCurrentPage(1);\n      getMovies();\n    } else if (currentPage !== props.currentPage) {\n      getMovies();\n    } else getMovies();\n  }, [finalQuery, currentPage, dispatch, props.query, props.currentPage]);\n  /*componentDidUpdate(previousProps, previousState) {\r\n    if(previousState.finalQuery !== finalQuery) {\r\n      //to get back to page number one when searching for a new movie, we have to set both store state and this component state\r\n      dispatch(changePage(1));\r\n      this.setState({currentPage: 1}, ()=> {\r\n        this.getMovies();\r\n      });\r\n    }\r\n    else if(previousState.currentPage !== currentPage){\r\n      this.getMovies();\r\n    }\r\n  }*/\n\n  /*static getDerivedStateFromProps(props, state) {\r\n    return{\r\n      finalQuery: props.query,\r\n      currentPage: props.currentPage\r\n    };\r\n  }*/\n  //add selected movie to favorites or to-watch list\n\n  const addToList = (id, title, relDate, list) => {\n    addMovie(id, title, relDate, list);\n    this.forceUpdate();\n  };\n\n  if (props.isAnyData) return React.createElement(\"div\", {\n    className: \"table-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Title\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, \"Release Date\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Favorite\"), React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"To Watch\"))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, props.movies.map(row => React.createElement(\"tr\", {\n    key: row.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, row.title), React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, row.release_date), React.createElement(\"td\", {\n    className: \"icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: (movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\",\n    onClick: () => {\n      this.addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: \"icon\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\",\n    onClick: () => {\n      this.addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })))))), React.createElement(Pagination, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }));else {\n    return React.createElement(\"div\", {\n      className: \"table-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"no-results no-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Nothing To Watch!\"));\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    movies: state.movies,\n    isAnyData: state.isAnyData,\n    currentPage: state.currentPage,\n    query: state.query\n  };\n}\n\nexport default Table;","map":{"version":3,"sources":["E:\\MovieBuff_React-Hooks\\src\\components\\table.js"],"names":["React","useState","useEffect","useSelector","useDispatch","addMovie","Pagination","FAV_MOVIE_LIST","TO_WATCH_MOVIE_LIST","movieExists","changePage","refreshMovies","Table","props","state","movies","isAnyData","currentPage","query","finalQuery","setFinalQuery","setCurrentPage","dispatch","getMovies","addToList","id","title","relDate","list","forceUpdate","map","row","release_date","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport  addMovie from '../globals';\r\nimport Pagination from './pagination';\r\nimport {FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, movieExists} from '../globals';\r\nimport {changePage, refreshMovies} from '../actions';\r\n\r\nfunction Table() {\r\n\r\n\r\n  const props = useSelector(\r\n    state => ({\r\n      movies: state.movies,\r\n      isAnyData: state.isAnyData,\r\n      currentPage: state.currentPage,\r\n      query: state.query\r\n    })\r\n  );\r\n  const [finalQuery, setFinalQuery] = useState(props.query);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const getMovies = () => {\r\n    if(props.query === \"\") return;\r\n    dispatch(refreshMovies());\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(finalQuery !== props.query) {\r\n      //to get back to page number one when searching for a new movie, we have to set both store state and this component state\r\n      dispatch(changePage(1));\r\n      setCurrentPage(1);\r\n      getMovies();\r\n    }\r\n    else if(currentPage !== props.currentPage){\r\n      getMovies();\r\n    }\r\n    else\r\n      getMovies();\r\n  }, [finalQuery, currentPage, dispatch, props.query, props.currentPage]);\r\n\r\n  /*componentDidUpdate(previousProps, previousState) {\r\n    if(previousState.finalQuery !== finalQuery) {\r\n      //to get back to page number one when searching for a new movie, we have to set both store state and this component state\r\n      dispatch(changePage(1));\r\n      this.setState({currentPage: 1}, ()=> {\r\n        this.getMovies();\r\n      });\r\n    }\r\n    else if(previousState.currentPage !== currentPage){\r\n      this.getMovies();\r\n    }\r\n  }*/\r\n\r\n  /*static getDerivedStateFromProps(props, state) {\r\n    return{\r\n      finalQuery: props.query,\r\n      currentPage: props.currentPage\r\n    };\r\n  }*/\r\n\r\n  //add selected movie to favorites or to-watch list\r\n  const addToList = (id, title, relDate, list) => {\r\n    addMovie(id, title, relDate, list);\r\n    this.forceUpdate();\r\n  }\r\n\r\n  if(props.isAnyData)\r\n    return (\r\n      <div className=\"table-container\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Title</th>\r\n              <th>Release Date</th>\r\n              <th>Favorite</th>\r\n              <th>To Watch</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {props.movies.map((row) => (\r\n            <tr key={row.id}>\r\n              <td>{row.title}</td>\r\n              <td>{row.release_date}</td>\r\n              <td className=\"icon\"><i className={(movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST)}}></i></td>\r\n              <td className=\"icon\"><i className={movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\"} onClick={()=>{this.addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST)}}></i></td>\r\n            </tr>\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n        <Pagination />\r\n      </div>\r\n\r\n    );\r\n  else {\r\n    return (\r\n      <div className=\"table-container\">\r\n        <h2 className=\"no-results no-selection\">Nothing To Watch!</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    movies: state.movies,\r\n    isAnyData: state.isAnyData,\r\n    currentPage: state.currentPage,\r\n    query: state.query\r\n  };\r\n}\r\n\r\nexport default Table;\r\n"]},"metadata":{},"sourceType":"module"}