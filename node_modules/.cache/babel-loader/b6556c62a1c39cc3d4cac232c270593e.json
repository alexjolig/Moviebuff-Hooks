{"ast":null,"code":"import _slicedToArray from \"E:\\\\MovieBuff_React-Hooks\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\MovieBuff_React-Hooks\\\\src\\\\components\\\\search.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { QUERY } from '../globals';\nimport { changeQuery } from '../actions';\n\nfunction Search() {\n  const _useState = useState(sessionStorage.getItem(QUERY) ? sessionStorage.getItem(QUERY) : \"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        movieQuery = _useState2[0],\n        setMovieQuery = _useState2[1];\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    //Get back the saved searched expression if any\n    const lastQuery = sessionStorage.getItem(QUERY);\n    if (lastQuery !== \"\" && lastQuery !== null) dispatch(changeQuery(lastQuery));\n  }, [dispatch]); //,[] means that Only run useEffect once\n\n  const changeHandler = event => {\n    setMovieQuery(event.target.value);\n  };\n\n  const sendQuery = e => {\n    if (e.keyCode === undefined || e.keyCode === 13) {\n      dispatch(changeQuery(movieQuery)); //Save the latest searched movie in local so that it can be displayed while switching back from favorites or to watch sections\n\n      sessionStorage.setItem(QUERY, movieQuery);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"search-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"search\",\n    placeholder: \"Which movie you are looking for?\",\n    onChange: e => {\n      changeHandler(e);\n    },\n    onKeyDown: e => {\n      sendQuery(e);\n    },\n    value: movieQuery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: sendQuery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Find My Movie!\"));\n}\n\nexport default Search;","map":{"version":3,"sources":["E:\\MovieBuff_React-Hooks\\src\\components\\search.js"],"names":["React","useState","useEffect","useDispatch","QUERY","changeQuery","Search","sessionStorage","getItem","movieQuery","setMovieQuery","dispatch","lastQuery","changeHandler","event","target","value","sendQuery","e","keyCode","undefined","setItem"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAAQC,KAAR,QAAoB,YAApB;AACA,SAAQC,WAAR,QAA0B,YAA1B;;AAEA,SAASC,MAAT,GAAkB;AAAA,oBAEoBL,QAAQ,CAACM,cAAc,CAACC,OAAf,CAAuBJ,KAAvB,IAAgCG,cAAc,CAACC,OAAf,CAAuBJ,KAAvB,CAAhC,GAAgE,EAAjE,CAF5B;AAAA;AAAA,QAETK,UAFS;AAAA,QAEGC,aAFH;;AAGhB,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMU,SAAS,GAAGL,cAAc,CAACC,OAAf,CAAuBJ,KAAvB,CAAlB;AACA,QAAGQ,SAAS,KAAK,EAAd,IAAoBA,SAAS,KAAK,IAArC,EACED,QAAQ,CAACN,WAAW,CAACO,SAAD,CAAZ,CAAR;AACH,GALQ,EAKN,CAACD,QAAD,CALM,CAAT,CALgB,CAUA;;AAEhB,QAAME,aAAa,GAAIC,KAAD,IAAW;AAC/BJ,IAAAA,aAAa,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAGA,QAAMC,SAAS,GAAIC,CAAD,IAAO;AACvB,QAAIA,CAAC,CAACC,OAAF,KAAcC,SAAd,IAA2BF,CAAC,CAACC,OAAF,KAAc,EAA7C,EAAiD;AAC/CR,MAAAA,QAAQ,CAACN,WAAW,CAACI,UAAD,CAAZ,CAAR,CAD+C,CAE/C;;AACAF,MAAAA,cAAc,CAACc,OAAf,CAAuBjB,KAAvB,EAA8BK,UAA9B;AACD;AACF,GAND;;AAQA,SACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,QAAxB;AAAiC,IAAA,WAAW,EAAC,kCAA7C;AAAgF,IAAA,QAAQ,EAAGS,CAAD,IAAO;AAACL,MAAAA,aAAa,CAACK,CAAD,CAAb;AAAiB,KAAnH;AAAqH,IAAA,SAAS,EAAGA,CAAD,IAAK;AAACD,MAAAA,SAAS,CAACC,CAAD,CAAT;AAAa,KAAnJ;AAAqJ,IAAA,KAAK,EAAET,UAA5J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,OAAO,EAAEQ,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,CADF;AAMD;;AAED,eAAeX,MAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux'\r\nimport {QUERY} from '../globals';\r\nimport {changeQuery} from '../actions';\r\n\r\nfunction Search() {\r\n\r\n  const [movieQuery, setMovieQuery] = useState(sessionStorage.getItem(QUERY) ? sessionStorage.getItem(QUERY) : \"\");\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    //Get back the saved searched expression if any\r\n    const lastQuery = sessionStorage.getItem(QUERY);\r\n    if(lastQuery !== \"\" && lastQuery !== null)\r\n      dispatch(changeQuery(lastQuery));\r\n  }, [dispatch]); //,[] means that Only run useEffect once\r\n\r\n  const changeHandler = (event) => {\r\n    setMovieQuery(event.target.value);\r\n  }\r\n  const sendQuery = (e) => {\r\n    if (e.keyCode === undefined || e.keyCode === 13) {\r\n      dispatch(changeQuery(movieQuery));\r\n      //Save the latest searched movie in local so that it can be displayed while switching back from favorites or to watch sections\r\n      sessionStorage.setItem(QUERY, movieQuery);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"search-container\">\r\n      <input type=\"text\" name=\"search\" placeholder=\"Which movie you are looking for?\" onChange={(e) => {changeHandler(e)}} onKeyDown={(e)=>{sendQuery(e)}} value={movieQuery}/>\r\n      <button onClick={sendQuery} >Find My Movie!</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}