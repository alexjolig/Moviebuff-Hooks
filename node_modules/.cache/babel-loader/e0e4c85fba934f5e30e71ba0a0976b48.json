{"ast":null,"code":"import _slicedToArray from \"E:\\\\React Projects\\\\Moviebuff-Hooks\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\React Projects\\\\Moviebuff-Hooks\\\\src\\\\components\\\\table.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport addMovie from '../globals';\nimport Pagination from './pagination';\nimport OtherTable from './other_table';\nimport { FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, movieExists } from '../globals';\nimport { changeThePage, refreshMovies } from '../actions';\n\nfunction Table() {\n  const props = useSelector(state => ({\n    movies: state.movies,\n    isAnyData: state.isAnyData,\n    currentPage: state.currentPage,\n    query: state.query\n  }));\n\n  const _useState = useState(props.query),\n        _useState2 = _slicedToArray(_useState, 2),\n        finalQuery = _useState2[0],\n        setFinalQuery = _useState2[1];\n\n  const _useState3 = useState(1),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currentPage = _useState4[0],\n        setCurrentPage = _useState4[1];\n\n  const dispatch = useDispatch(); //Simulate foceUpdate()\n\n  const _useState5 = useState(),\n        _useState6 = _slicedToArray(_useState5, 2),\n        updateState = _useState6[1];\n\n  const forceUpdate = useCallback(() => updateState({}), []);\n  useEffect(() => {\n    console.log(props.currentPage);\n\n    const getMovies = () => {\n      if (props.query === \"\") return;\n      dispatch(refreshMovies());\n    };\n\n    if (finalQuery !== props.query) {\n      //to get back to page number one when searching for a new movie, we have to set both store state and this component state\n      setFinalQuery(props.query);\n      dispatch(changeThePage(1));\n      setCurrentPage(1);\n    }\n\n    getMovies();\n  }, [finalQuery, props.query, props.currentPage, currentPage, dispatch]); //add selected movie to favorites or to-watch list\n\n  const addToList = (id, title, relDate, list) => {\n    addMovie(id, title, relDate, list);\n    forceUpdate();\n  };\n\n  if (props.isAnyData)\n    /*return (\r\n      <div className=\"table-container\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Title</th>\r\n              <th>Release Date</th>\r\n              <th>Favorite</th>\r\n              <th>To Watch</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {props.movies.map((row) => (\r\n            <tr key={row.id}>\r\n              <td>{row.title}</td>\r\n              <td>{row.release_date}</td>\r\n              <td className=\"icon\"><i className={(movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\"} onClick={()=>{addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST)}}></i></td>\r\n              <td className=\"icon\"><i className={movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\"} onClick={()=>{addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST)}}></i></td>\r\n            </tr>\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n        <Pagination />\r\n      </div>\r\n      );*/\n    return React.createElement(OtherTable, {\n      movies: props.movies,\n      hasPagination: true,\n      list: null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    });else {\n    return React.createElement(\"div\", {\n      className: \"table-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"no-results no-selection\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Nothing To Watch!\"));\n  }\n}\n\nexport default Table;","map":{"version":3,"sources":["E:\\React Projects\\Moviebuff-Hooks\\src\\components\\table.js"],"names":["React","useState","useEffect","useCallback","useSelector","useDispatch","addMovie","Pagination","OtherTable","FAV_MOVIE_LIST","TO_WATCH_MOVIE_LIST","movieExists","changeThePage","refreshMovies","Table","props","state","movies","isAnyData","currentPage","query","finalQuery","setFinalQuery","setCurrentPage","dispatch","updateState","forceUpdate","console","log","getMovies","addToList","id","title","relDate","list"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAQC,QAAR,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,SAAQC,cAAR,EAAwBC,mBAAxB,EAA6CC,WAA7C,QAA+D,YAA/D;AACA,SAAQC,aAAR,EAAuBC,aAAvB,QAA2C,YAA3C;;AAEA,SAASC,KAAT,GAAiB;AAGf,QAAMC,KAAK,GAAGX,WAAW,CACvBY,KAAK,KAAK;AACRC,IAAAA,MAAM,EAAED,KAAK,CAACC,MADN;AAERC,IAAAA,SAAS,EAAEF,KAAK,CAACE,SAFT;AAGRC,IAAAA,WAAW,EAAEH,KAAK,CAACG,WAHX;AAIRC,IAAAA,KAAK,EAAEJ,KAAK,CAACI;AAJL,GAAL,CADkB,CAAzB;;AAHe,oBAWqBnB,QAAQ,CAACc,KAAK,CAACK,KAAP,CAX7B;AAAA;AAAA,QAWRC,UAXQ;AAAA,QAWIC,aAXJ;;AAAA,qBAYuBrB,QAAQ,CAAC,CAAD,CAZ/B;AAAA;AAAA,QAYRkB,WAZQ;AAAA,QAYKI,cAZL;;AAaf,QAAMC,QAAQ,GAAGnB,WAAW,EAA5B,CAbe,CAef;;AAfe,qBAgBSJ,QAAQ,EAhBjB;AAAA;AAAA,QAgBNwB,WAhBM;;AAiBf,QAAMC,WAAW,GAAGvB,WAAW,CAAC,MAAMsB,WAAW,CAAC,EAAD,CAAlB,EAAwB,EAAxB,CAA/B;AAIAvB,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,OAAO,CAACC,GAAR,CAAYb,KAAK,CAACI,WAAlB;;AACA,UAAMU,SAAS,GAAG,MAAM;AACtB,UAAGd,KAAK,CAACK,KAAN,KAAgB,EAAnB,EAAuB;AACvBI,MAAAA,QAAQ,CAACX,aAAa,EAAd,CAAR;AACD,KAHD;;AAIA,QAAGQ,UAAU,KAAKN,KAAK,CAACK,KAAxB,EAA+B;AAC7B;AACAE,MAAAA,aAAa,CAACP,KAAK,CAACK,KAAP,CAAb;AACAI,MAAAA,QAAQ,CAACZ,aAAa,CAAC,CAAD,CAAd,CAAR;AACAW,MAAAA,cAAc,CAAC,CAAD,CAAd;AACD;;AACDM,IAAAA,SAAS;AACV,GAbQ,EAaN,CAACR,UAAD,EAAaN,KAAK,CAACK,KAAnB,EAA0BL,KAAK,CAACI,WAAhC,EAA6CA,WAA7C,EAA0DK,QAA1D,CAbM,CAAT,CArBe,CAoCf;;AACA,QAAMM,SAAS,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYC,OAAZ,EAAqBC,IAArB,KAA8B;AAC9C5B,IAAAA,QAAQ,CAACyB,EAAD,EAAKC,KAAL,EAAYC,OAAZ,EAAqBC,IAArB,CAAR;AACAR,IAAAA,WAAW;AACZ,GAHD;;AAKA,MAAGX,KAAK,CAACG,SAAT;AACE;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,WACE,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAEH,KAAK,CAACE,MAA1B;AAAkC,MAAA,aAAa,EAAE,IAAjD;AAAuD,MAAA,IAAI,EAAE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CA3BF,KA8BK;AACH,WACE;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,SAAS,EAAC,yBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,CADF;AAKD;AACF;;AAED,eAAeH,KAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport  addMovie from '../globals';\r\nimport Pagination from './pagination';\r\nimport OtherTable from './other_table';\r\nimport {FAV_MOVIE_LIST, TO_WATCH_MOVIE_LIST, movieExists} from '../globals';\r\nimport {changeThePage, refreshMovies} from '../actions';\r\n\r\nfunction Table() {\r\n\r\n\r\n  const props = useSelector(\r\n    state => ({\r\n      movies: state.movies,\r\n      isAnyData: state.isAnyData,\r\n      currentPage: state.currentPage,\r\n      query: state.query\r\n    })\r\n  );\r\n  const [finalQuery, setFinalQuery] = useState(props.query);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const dispatch = useDispatch();\r\n\r\n  //Simulate foceUpdate()\r\n  const [, updateState] = useState();\r\n  const forceUpdate = useCallback(() => updateState({}), []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    console.log(props.currentPage);\r\n    const getMovies = () => {\r\n      if(props.query === \"\") return;\r\n      dispatch(refreshMovies());\r\n    }\r\n    if(finalQuery !== props.query) {\r\n      //to get back to page number one when searching for a new movie, we have to set both store state and this component state\r\n      setFinalQuery(props.query);\r\n      dispatch(changeThePage(1));\r\n      setCurrentPage(1);\r\n    }\r\n    getMovies();\r\n  }, [finalQuery, props.query, props.currentPage, currentPage, dispatch] );\r\n\r\n  //add selected movie to favorites or to-watch list\r\n  const addToList = (id, title, relDate, list) => {\r\n    addMovie(id, title, relDate, list);\r\n    forceUpdate();\r\n  }\r\n\r\n  if(props.isAnyData)\r\n    /*return (\r\n      <div className=\"table-container\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Title</th>\r\n              <th>Release Date</th>\r\n              <th>Favorite</th>\r\n              <th>To Watch</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {props.movies.map((row) => (\r\n            <tr key={row.id}>\r\n              <td>{row.title}</td>\r\n              <td>{row.release_date}</td>\r\n              <td className=\"icon\"><i className={(movieExists(row.id, FAV_MOVIE_LIST) ? \"fas\" : \"far\") + \" fa-star\"} onClick={()=>{addToList(row.id, row.title, row.release_date, FAV_MOVIE_LIST)}}></i></td>\r\n              <td className=\"icon\"><i className={movieExists(row.id, TO_WATCH_MOVIE_LIST) ? \"fas fa-eye\" : \"far fa-eye-slash\"} onClick={()=>{addToList(row.id, row.title, row.release_date, TO_WATCH_MOVIE_LIST)}}></i></td>\r\n            </tr>\r\n          ))}\r\n          </tbody>\r\n        </table>\r\n        <Pagination />\r\n      </div>\r\n\r\n    );*/\r\n    return(\r\n      <OtherTable movies={props.movies} hasPagination={true} list={null}/>\r\n    );\r\n  else {\r\n    return (\r\n      <div className=\"table-container\">\r\n        <h2 className=\"no-results no-selection\">Nothing To Watch!</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n"]},"metadata":{},"sourceType":"module"}