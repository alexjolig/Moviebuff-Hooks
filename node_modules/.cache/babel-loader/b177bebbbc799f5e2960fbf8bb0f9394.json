{"ast":null,"code":"import _slicedToArray from \"E:\\\\MovieBuff_React-Hooks\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"E:\\\\MovieBuff_React-Hooks\\\\src\\\\components\\\\search.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { QUERY } from '../globals';\nimport { changeQuery } from '../actions';\n\nfunction Search() {\n  const _useState = useState(sessionStorage.getItem(QUERY) ? sessionStorage.getItem(QUERY) : \"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        movieQuery = _useState2[0],\n        setMovieQuery = _useState2[1];\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    //Get back the saved searched expression if any\n    //const movieQuery = sessionStorage.getItem(QUERY);\n    if (movieQuery !== \"\" && movieQuery !== null) dispatch(changeQuery(movieQuery));\n  }, []); //,[] means that Only run useEffect once\n\n  changeHandler = event => {\n    setMovieQuery(event.target.value);\n  };\n\n  sendQuery = e => {\n    if (e.keyCode === undefined || e.keyCode === 13) {\n      this.props.changeQuery(this.state.movieQuery); //Save the latest searched movie in local so that it can be displayed while switching back from favorites or to watch sections\n\n      sessionStorage.setItem(QUERY, this.state.movieQuery);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"search-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"search\",\n    placeholder: \"Which movie you are looking for?\",\n    onChange: e => {\n      this.changeHandler(e);\n    },\n    onKeyDown: e => {\n      this.sendQuery(e);\n    },\n    value: this.state.movieQuery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: this.sendQuery,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Find My Movie!\"));\n}\n\nconst mapDispatchToProps = {\n  changeQuery\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);","map":{"version":3,"sources":["E:\\MovieBuff_React-Hooks\\src\\components\\search.js"],"names":["React","useState","useEffect","connect","QUERY","changeQuery","Search","sessionStorage","getItem","movieQuery","setMovieQuery","dispatch","useDispatch","changeHandler","event","target","value","sendQuery","e","keyCode","undefined","props","state","setItem","mapDispatchToProps","mapStateToProps"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAAQC,KAAR,QAAoB,YAApB;AACA,SAAQC,WAAR,QAA0B,YAA1B;;AAEA,SAASC,MAAT,GAAkB;AAAA,oBAEoBL,QAAQ,CAACM,cAAc,CAACC,OAAf,CAAuBJ,KAAvB,IAAgCG,cAAc,CAACC,OAAf,CAAuBJ,KAAvB,CAAhC,GAAgE,EAAjE,CAF5B;AAAA;AAAA,QAETK,UAFS;AAAA,QAEGC,aAFH;;AAGhB,QAAMC,QAAQ,GAAGC,WAAW,EAA5B;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACA,QAAGO,UAAU,KAAK,EAAf,IAAqBA,UAAU,KAAK,IAAvC,EACEE,QAAQ,CAACN,WAAW,CAACI,UAAD,CAAZ,CAAR;AACH,GALQ,EAKN,EALM,CAAT,CALgB,CAUR;;AAERI,EAAAA,aAAa,GAAIC,KAAD,IAAW;AACzBJ,IAAAA,aAAa,CAACI,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAb;AACD,GAFD;;AAGAC,EAAAA,SAAS,GAAIC,CAAD,IAAO;AACjB,QAAIA,CAAC,CAACC,OAAF,KAAcC,SAAd,IAA2BF,CAAC,CAACC,OAAF,KAAc,EAA7C,EAAiD;AAC/C,WAAKE,KAAL,CAAWhB,WAAX,CAAuB,KAAKiB,KAAL,CAAWb,UAAlC,EAD+C,CAE/C;;AACAF,MAAAA,cAAc,CAACgB,OAAf,CAAuBnB,KAAvB,EAA8B,KAAKkB,KAAL,CAAWb,UAAzC;AACD;AACF,GAND;;AAQE,SACE;AAAK,IAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,IAAI,EAAC,QAAxB;AAAiC,IAAA,WAAW,EAAC,kCAA7C;AAAgF,IAAA,QAAQ,EAAGS,CAAD,IAAO;AAAC,WAAKL,aAAL,CAAmBK,CAAnB;AAAsB,KAAxH;AAA0H,IAAA,SAAS,EAAGA,CAAD,IAAK;AAAC,WAAKD,SAAL,CAAeC,CAAf;AAAkB,KAA7J;AAA+J,IAAA,KAAK,EAAE,KAAKI,KAAL,CAAWb,UAAjL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,OAAO,EAAE,KAAKQ,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF,CADF;AAOH;;AAGD,MAAMO,kBAAkB,GAAG;AACzBnB,EAAAA;AADyB,CAA3B;AAIA,eAAeF,OAAO,CAACsB,eAAD,EAAkBD,kBAAlB,CAAP,CAA6ClB,MAA7C,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {QUERY} from '../globals';\r\nimport {changeQuery} from '../actions';\r\n\r\nfunction Search() {\r\n\r\n  const [movieQuery, setMovieQuery] = useState(sessionStorage.getItem(QUERY) ? sessionStorage.getItem(QUERY) : \"\");\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    //Get back the saved searched expression if any\r\n    //const movieQuery = sessionStorage.getItem(QUERY);\r\n    if(movieQuery !== \"\" && movieQuery !== null)\r\n      dispatch(changeQuery(movieQuery));\r\n  }, []); //,[] means that Only run useEffect once\r\n\r\n  changeHandler = (event) => {\r\n    setMovieQuery(event.target.value);\r\n  }\r\n  sendQuery = (e) => {\r\n    if (e.keyCode === undefined || e.keyCode === 13) {\r\n      this.props.changeQuery(this.state.movieQuery);\r\n      //Save the latest searched movie in local so that it can be displayed while switching back from favorites or to watch sections\r\n      sessionStorage.setItem(QUERY, this.state.movieQuery);\r\n    }\r\n  }\r\n\r\n    return (\r\n      <div className=\"search-container\">\r\n        <input type=\"text\" name=\"search\" placeholder=\"Which movie you are looking for?\" onChange={(e) => {this.changeHandler(e)}} onKeyDown={(e)=>{this.sendQuery(e)}} value={this.state.movieQuery}/>\r\n        <button onClick={this.sendQuery} >Find My Movie!</button>\r\n      </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n  changeQuery\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Search);\r\n"]},"metadata":{},"sourceType":"module"}